{
  "info": {
    "name": "Time Synchronization API Tests",
    "description": "Postman collection for testing the time synchronization module endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Time Synchronization",
      "item": [
        {
          "name": "Get Current Time",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/time/current",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["time", "current"]
            }
          },
          "response": [],
          "event": [{
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has timestamp', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('current_time');",
                "    pm.expect(jsonData).to.have.property('synchronized_time');",
                "});"
              ]
            }
          }]
        },
        {
          "name": "Trigger Time Sync",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"force\": false\n}"
            },
            "url": {
              "raw": "http://localhost:8000/time/sync",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["time", "sync"]
            }
          },
          "response": [],
          "event": [{
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Sync response is valid', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('synchronized');",
                "    pm.expect(jsonData).to.have.property('peers_contacted');",
                "});"
              ]
            }
          }]
        },
        {
          "name": "Get Clock Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/time/clock/status",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["time", "clock", "status"]
            }
          },
          "response": [],
          "event": [{
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Clock status has required fields', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('synchronized');",
                "    pm.expect(jsonData).to.have.property('clock_offset');",
                "    pm.expect(jsonData).to.have.property('drift_rate');",
                "    pm.expect(jsonData).to.have.property('last_sync_time');",
                "});"
              ]
            }
          }]
        },
        {
          "name": "Get Synchronization Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/time/sync/status",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["time", "sync", "status"]
            }
          },
          "response": [],
          "event": [{
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Sync status is complete', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('synchronized');",
                "    pm.expect(jsonData).to.have.property('clock_offset');",
                "    pm.expect(jsonData).to.have.property('drift_rate');",
                "    pm.expect(jsonData).to.have.property('peers');",
                "    pm.expect(jsonData).to.have.property('last_sync_time');",
                "    pm.expect(jsonData).to.have.property('offset_history_size');",
                "});"
              ]
            }
          }]
        }
      ]
    },
    {
      "name": "Clock Analysis",
      "item": [
        {
          "name": "Get Clock Skew Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/time/clock/skew",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["time", "clock", "skew"]
            }
          },
          "response": [],
          "event": [{
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Skew statistics are present', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('current_skew');",
                "    pm.expect(jsonData).to.have.property('drift_rate');",
                "    pm.expect(jsonData).to.have.property('mean_offset');",
                "    pm.expect(jsonData).to.have.property('acceptable');",
                "});"
              ]
            }
          }]
        },
        {
          "name": "Get Sync Recommendation",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/time/clock/recommendation",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["time", "clock", "recommendation"]
            }
          },
          "response": [],
          "event": [{
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Recommendation has interval', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('recommended_sync_interval');",
                "    pm.expect(jsonData.recommended_sync_interval).to.be.a('number');",
                "    pm.expect(jsonData.recommended_sync_interval).to.be.above(0);",
                "});"
              ]
            }
          }]
        }
      ]
    },
    {
      "name": "Message Correction",
      "item": [
        {
          "name": "Correct Message Timestamp",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"timestamp\": {{$timestamp}},\n  \"sender_id\": \"test_sender\",\n  \"method\": \"hybrid\"\n}"
            },
            "url": {
              "raw": "http://localhost:8000/time/correct",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["time", "correct"]
            }
          },
          "response": [],
          "event": [{
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Correction response is valid', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('original_timestamp');",
                "    pm.expect(jsonData).to.have.property('corrected_timestamp');",
                "    pm.expect(jsonData).to.have.property('correction_info');",
                "});"
              ]
            }
          }]
        },
        {
          "name": "Get Correction Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/time/correct/stats",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["time", "correct", "stats"]
            }
          },
          "response": [],
          "event": [{
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Correction stats are present', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('corrections_applied');",
                "    pm.expect(jsonData).to.have.property('average_correction_magnitude');",
                "    pm.expect(jsonData).to.have.property('max_correction_magnitude');",
                "});"
              ]
            }
          }]
        }
      ]
    },
    {
      "name": "Message Ordering",
      "item": [
        {
          "name": "Add Message to Buffer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"msg_id\": \"test_msg_{{$randomInt}}\",\n  \"sender_id\": \"test_sender\",\n  \"recipient_id\": \"test_recipient\",\n  \"payload\": \"Test message for ordering\",\n  \"original_timestamp\": {{$timestamp}},\n  \"corrected_timestamp\": {{$timestamp}},\n  \"arrival_time\": {{$timestamp}}\n}"
            },
            "url": {
              "raw": "http://localhost:8000/time/order/buffer",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["time", "order", "buffer"]
            }
          },
          "response": [],
          "event": [{
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Message added successfully', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('success');",
                "    pm.expect(jsonData.success).to.be.true;",
                "});"
              ]
            }
          }]
        },
        {
          "name": "Get Deliverable Messages",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/time/order/deliverable",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["time", "order", "deliverable"]
            }
          },
          "response": [],
          "event": [{
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Response has messages array', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('messages');",
                "    pm.expect(jsonData.messages).to.be.an('array');",
                "});"
              ]
            }
          }]
        },
        {
          "name": "Get Buffer Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/time/order/status",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["time", "order", "status"]
            }
          },
          "response": [],
          "event": [{
            "listen": "test",
            "script": {
              "exec": [
                "pm.test('Status code is 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Buffer status is complete', function () {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('buffer_size');",
                "    pm.expect(jsonData).to.have.property('messages_buffered');",
                "    pm.expect(jsonData).to.have.property('buffer_utilization');",
                "});"
              ]
            }
          }]
        }
      ]
    },
    {
      "name": "Testing Scenarios",
      "item": [
        {
          "name": "Test Sequence - Full Sync Flow",
          "item": [
            {
              "name": "1. Check Initial Status",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:8000/time/sync/status",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "8000",
                  "path": ["time", "sync", "status"]
                }
              }
            },
            {
              "name": "2. Force Synchronization",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"force\": true\n}"
                },
                "url": {
                  "raw": "http://localhost:8000/time/sync",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "8000",
                  "path": ["time", "sync"]
                }
              }
            },
            {
              "name": "3. Check Post-Sync Status",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:8000/time/sync/status",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "8000",
                  "path": ["time", "sync", "status"]
                }
              }
            },
            {
              "name": "4. Get Clock Skew Analysis",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:8000/time/clock/skew",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "8000",
                  "path": ["time", "clock", "skew"]
                }
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "peer_port_1",
      "value": "8001",
      "type": "string"
    },
    {
      "key": "peer_port_2", 
      "value": "8002",
      "type": "string"
    },
    {
      "key": "peer_port_3",
      "value": "8003", 
      "type": "string"
    }
  ]
}